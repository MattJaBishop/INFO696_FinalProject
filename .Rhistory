library(ggplot2)
#Create graph in ggplot2
static_plot <- ggplot(data = Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedLevel2) +
aes(x = Year, y = Cost, color = Type) +
geom_line() +
labs(title = "National Health Expenditures",
x = "Year",
y = "Cost in Billions") +
theme_minimal()
#Convert to plotly graph
interactive_plot <- plotly::ggplotly(static_plot)
interactive_plot
#Save to plotly
library(plotly)
api_create(interactive_plot, filename = "OverallHistory")
library("dplyr", lib.loc="~/R/win-library/3.5")
library("ggplot2", lib.loc="~/R/win-library/3.5")
library("ggthemes", lib.loc="~/R/win-library/3.5")
library("htmltools", lib.loc="~/R/win-library/3.5")
library("htmlwidgets", lib.loc="~/R/win-library/3.5")
library("labeling", lib.loc="~/R/win-library/3.5")
library("plotly", lib.loc="~/R/win-library/3.5")
library("plyr", lib.loc="~/R/win-library/3.5")
library("shiny", lib.loc="~/R/win-library/3.5")
library("shinyWidgets", lib.loc="~/R/win-library/3.5")
library("sys", lib.loc="~/R/win-library/3.5")
library("esquisse", lib.loc="~/R/win-library/3.5")
library(ggplot2)
#Create graph in ggplot2
static_plot <- ggplot(data = Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedLevel2) +
aes(x = Year, y = Cost, color = Type) +
geom_line() +
labs(title = "National Health Expenditures",
x = "Year",
y = "Cost in Billions") +
theme_minimal()
#Convert to plotly graph
interactive_plot <- plotly::ggplotly(static_plot)
interactive_plot
#Save to plotly
library(plotly)
api_create(interactive_plot, filename = "OverallHistory")
library(ggplot2)
#Create graph in ggplot2
static_plot <- ggplot(data = Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedLevel2) +
aes(x = Year, y = Cost, color = Type) +
geom_line() +
labs(title = "National Health Expenditures",
x = "Year",
y = "Cost in Billions") +
theme_minimal()
Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedLevel2 <- read.csv("C:/Users/mattj/Desktop/PythonFiles/AdvProjViz/INFO696_FinalProject/Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedLevel2.csv")
View(Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedLevel2)
library(ggplot2)
#Create graph in ggplot2
static_plot <- ggplot(data = Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedLevel2) +
aes(x = Year, y = Cost, color = Type) +
geom_line() +
labs(title = "National Health Expenditures",
x = "Year",
y = "Cost in Billions") +
theme_minimal()
#Convert to plotly graph
interactive_plot <- plotly::ggplotly(static_plot)
interactive_plot
#Save to plotly
library(plotly)
api_create(interactive_plot, filename = "OverallHistory")
Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedPersonalHealthcare <- read.csv("C:/Users/mattj/Desktop/PythonFiles/AdvProjViz/INFO696_FinalProject/Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedPersonalHealthcare.csv")
View(Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedPersonalHealthcare)
library(ggplot2)
library(plyr)
#Create graph in ggplot2
data = Table02_NationalHealthExpendituresByType_BillionDollars_NormalizedPersonalHealthcare
data$prop = ddply(data, "Year", transform,
Percent = Cost / sum(Cost) * 100)
static_plot <- ggplot(data$prop, aes(x = Year, y = Percent, fill = Type)) +
geom_area(alpha=0.4 , size=.2, colour="black") +
theme_minimal() +
theme(legend.position='none')
#Convert to plotly graph
interactive_plot <- plotly::ggplotly(static_plot)
interactive_plot
#Save to plotly
library(plotly)
api_create(interactive_plot, filename = "PersonalHealthcareHistory")
esquisse:::esquisser()
Table02_NationalHealthExpendituresByType_BillionDollars_Normalized <- read.csv("C:/Users/mattj/Desktop/PythonFiles/AdvProjViz/INFO696_FinalProject/Table02_NationalHealthExpendituresByType_BillionDollars_Normalized.csv")
View(Table02_NationalHealthExpendituresByType_BillionDollars_Normalized)
esquisse:::esquisser()
library(ggplot2)
ggplot(data = Table02_NationalHealthExpendituresByType_BillionDollars_Normalized) +
aes(x = Year, y = Cost, color = Type) +
geom_line() +
theme_minimal()
